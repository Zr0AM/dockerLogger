buildscript {
    dependencies {
        classpath("org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.2.2")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:5.1.0.4882")
    }
}

plugins {
    id 'java'
    id 'war'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'jacoco'
}

apply plugin: 'jsonschema2pojo'

configurations {
    all*.exclude module: 'spring-boot-start-logging'
}

configurations.archives.canBeResolved = true

group = "org.omnomnom"
version = "1.0.0-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

repositories {
    mavenCentral()
}

ext {
    set("springCloudVersion", "2024.0.0")
    set("build.timestamp", (new Date().format("yyyyMMddHHmmss")))
    set("groupId","$group")
    appStartClassName = 'org.omnomnom.dockerlogger.DockerLoggerApplication'
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation("org.springframework.cloud:spring-cloud-starter-vault-config")
    implementation("org.springframework.vault:spring-vault-core")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-quartz")

    implementation("net.javacrumbs.shedlock:shedlock-spring:6.3.0")
    implementation("javax.validation:validation-api:1.0.0.GA")
    implementation("org.springframework.boot:spring-boot-starter-data-rest")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    runtimeOnly("com.microsoft.sqlserver:mssql-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

war {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    enabled = true
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
}

artifacts {
    archives bootWar
}

tasks.named("test") {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
    jvmArgs(
            "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    )
}

sonar {
    properties {
        property "sonar.projectKey", "Zr0AM_dockerLogger"
        property "sonar.organization", "zr0am"
    }
}

jsonSchema2Pojo {
    targetPackage = group.toString() + "." +  rootProject.name
    includeJsr303Annotations = true
    includeAdditionalProperties = false
    dateType = "java.time.LocalDate"
    dateTimeType = "java.time.Instant"
    useBigDecimals = true
    useBigIntegers = true
    initializeCollections = true
    includeHashcodeAndEquals = true
    includeToString = true
    removeOldOutput = true
    outputEncoding = "UTF-8"
    setSource(files("src/main/json"))
    setAnnotationStyle("jackson2")
}
